@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Mvc.Localization
@using Microsoft.Extensions.Localization
@model Madrugada.ViewModels.LocationDetail

@inject SignInManager<IdentityUser> SignInManager
@inject IViewLocalizer Localizer
@inject IStringLocalizer<Madrugada.Localization.GlobalSharedResource> GlobalSharedLocalizer

@{
    ViewData["Title"] = Localizer["Details"];
}

<link rel="stylesheet" href="~/css/twentytwenty.css" type="text/css" media="screen" />
<style>

    #map, #street {
        height: 400px;
        width: 100%;
    }
</style>


<h2>
    @Html.DisplayFor(model => model.Location.Name)
</h2>
<h3>
    @Html.DisplayFor(model => model.Location.Work.Name)
</h3>
<p>
    @Html.DisplayNameFor(model => model.Location.Address)：@Html.DisplayFor(model => model.Location.Address)
</p>
<div class="row">
    <div id="navcontainer" class="col-md-2">
        <nav id="verticalnav" class="pinned nav flex-column">
            <a class="nav-link" href="#Text">@Localizer["Text"]</a>
            <a class="nav-link" href="#MapAndStreet">
                @if (Model.Location.HasStreetView)
                {
                    @Localizer["MapAndStreet"]
                }
                else
                {
                    @Localizer["MapOnly"]
                }
            </a>
            <a class="nav-link" href="#Photos">@Localizer["Photos"]</a>
            <a class="nav-link" href="#MessageBoard">@Localizer["MessageBoard"]</a>
        </nav>
    </div>

    <div class="col-md-10">
        <div id="Text">@Html.Raw(Html.Encode(Model.Location.Text).Replace("&#xA;", "<br />"))</div>
        <hr />
        <h4 id="MapAndStreet">
            @if (Model.Location.HasStreetView)
            {
                @Localizer["MapAndStreet"]
            }
            else
            {
                @Localizer["MapOnly"]
            }
        </h4>
        <div id="map"></div>
        <div id="street"></div>
        <hr />
        <h4 id="Photos">
            @Localizer["Photos"]
        </h4>
        <div class="container-fluid">

            @foreach (var image in Model.Location.Images)
            {
                if ((image.IsCompare) && (!image.IsCg))
                {
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">@image.Name</h5>
                            <h6 class="card-subtitle mb-2 text-muted">@Localizer["ShotAt"] @image.Date.ToLongDateString() @image.Copyright</h6>
                            <a href="@image.Url" target="_blank" class="card-link">@Localizer["ViewOriginal"]</a>
                        </div>
                        <div class="twentytwenty-container card-img-bottom">
                            <img src="@image.Url" class="img-fluid" />
                            <img src="@image.CompareImage.Url" class="img-fluid" />
                        </div>
                    </div>
                }
            }
        </div>
        <div>
            <a asp-action="Edit" asp-route-id="@Model.Location.LocationId">@GlobalSharedLocalizer["Edit"]</a> |
            <a asp-action="Index">@GlobalSharedLocalizer["BackToList"]</a>
        </div>
        <hr />
        <h4 id="MessageBoard">@Localizer["MessageBoard"]</h4>
        <div>
            <form asp-controller="Messages" asp-action="PostMessage" method="post">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                @if (SignInManager.IsSignedIn(User))
                {
                    <div class="form-group form-check">
                        <label class="form-check-label">
                            <input class="form-check-input" asp-for="Message.IsAnonymous" name="IsAnonymous" /> @Html.DisplayNameFor(model => model.Message.IsAnonymous)
                        </label>
                    </div>
                }
                <div class="form-group">
                    <label asp-for="Message.ReplyId" class="control-label"></label>
                    <input asp-for="Message.ReplyId" class="form-control" name="ReplyId" />
                    <span asp-validation-for="Message.ReplyId" data-valmsg-for="ReplyId" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="Message.Content" class="control-label"></label>
                    <textarea asp-for="Message.Content" class="form-control" name="Content"></textarea>
                    <span asp-validation-for="Message.Content" data-valmsg-for="Content" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <input type="submit" value="@GlobalSharedLocalizer["Submit"]" class="btn btn-primary" />
                </div>
            </form>
        </div>

        <hr />
        <div>
            @foreach (var item in Model.Location.Messages)
            {
                <div class="card" id="@item.MessageId">
                    <div class="card-body">
                        <a href="#@item.MessageId" class="badge badge-info">
                            #@item.MessageId
                        </a>
                        @if (item.IsReply)
                        {
                            <Text>
                            <a href="#@item.ReplyId" class="card-link">&gt;&gt;@item.ReplyId</a>
                            </Text>
                        }
                        <p class="card-text">
                            @Html.Raw(Html.Encode(item.Content).Replace("&#xA;", "<br />"))
                        </p>

                    </div>
                </div>
            }

        </div>
    </div>
</div>






@section Scripts
    {
    <script>
    // Initialize and add the map
    function initMap() {
        // The location of Uluru
        var loc = { lat: @Model.Location.Latitude, lng: @Model.Location.Longitude };
        // The map, centered at Uluru
        var map = new google.maps.Map(
            document.getElementById('map'), { zoom: @Model.Location.Zoom, center: loc });
        // The marker, positioned at Uluru
        var marker = new google.maps.Marker({ position: loc, map: map });

        @if (Model.Location.HasStreetView)
        {
            <Text>

        var paraloc = { lat: @Model.Location.StreetViewLatitude, lng: @Model.Location.StreetViewLongitude };
        var paramap = new google.maps.Map(
            document.getElementById('street'), { zoom: @Model.Location.Zoom, center: paraloc });
        var panorama = new google.maps.StreetViewPanorama(
            document.getElementById('street'), {
                position: paraloc,
                pov: {
                    heading: @Model.Location.StreetViewHeading,
                    pitch: @Model.Location.StreetViewPitch
                        }
            });
            </Text>
        }
    }
    </script>




    @{
        await Html.RenderPartialAsync("_GoogleMapsApiPartial");
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
        await Html.RenderPartialAsync("_jQueryScriptsPartial");
        await Html.RenderPartialAsync("_ShowdownScriptsPartial");
    }
    <script src="~/js/jquery.pin.js" type="text/javascript"></script>
    <script src="~/js/jquery.event.move.js" type="text/javascript"></script>
    <script src="~/js/jquery.twentytwenty.js" type="text/javascript"></script>
    <script>
        $(function () {
            $(".twentytwenty-container").twentytwenty();
        });
        $(function () {
            var converter = new showdown.Converter();
            var textNode = $("#Text");
            var html = converter.makeHtml(textNode.text());
            textNode.html(html);
        });
        $("#verticalnav").pin({
            containerSelector: "#navcontainer",
            minwidth: 768
        })

    </script>
}